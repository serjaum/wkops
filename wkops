#!/bin/bash

WKOPSROOT="$HOME/.wkops/"

function install {
    output="$HOME/.wkops/bin/kops$1"
    wget https://github.com/kubernetes/kops/releases/download/v$1/kops-linux-amd64 -O $output -q --show-progress
    if [[ "$?" -ne "0" ]]; then
        rm $output
        echo "Cannot download kops version $1"
        exit 1
    fi
    chmod +x $output
    use $1
}

function use {
    if [ -f "$WKOPSROOT/bin/kops$1" ]; then
      ln -sf $HOME/.wkops/bin/kops$1 $HOME/.wkops/kops
      echo -n "You are using kops "
      kops version
    else
      echo "You do not have the kops $1"
      exit 1
    fi
}

function list {
    if [ "$1" == "--remote" ]; then
        echo "Listing kops versions from repository"
        curl -sS https://api.github.com/repos/kubernetes/kops/releases | jq  -r '.[].name'
    else
        echo "Kops versions installed"
        echo ""
        versions=$(ls $WKOPSROOT/bin | sed "s/kops//g")
        if [ -z "$versions" ]; then
            echo "No kops installed"
            exit 1
        else
           echo "$versions"
        fi
    fi
}

function delete {
    if [ -z "$1" ]; then
        echo "To delete a specific version: wkops delete <version>"
        echo "To delete all versions: wkops delete --all"
        exit 1
    fi
    if [ "$1" == "--all" ]; then
        echo "Deleting all kops installed"
        for f in $WKOPSROOT/bin/*; do
            echo "Deleting kops $f ..."
            rm $f
        done
    else
        echo "Deleting kops $1"
        rm $WKOPSROOT/bin/kops$1
        if [ "$?" -ne "0" ]; then
            echo "Version $1 does not exists"
            wkops list
        fi
    fi
}

function detect {
    if ! kubectl get nodes > /dev/null; then
        echo "Err:"
        exit 1
    fi
    version=$(kubectl get ds kops-controller -n kube-system -o jsonpath='{.metadata.labels.version}' | sed "s/v//g")
    echo "kops version: $version"
    k=$(list | grep $version)
    if [ -z "$k" ]; then
    read -r -p "Do you want to install kops $version? [y/N] " response
        case "$response" in
            [yY][eE][sS]|[yY]) 
                install $version
                ;;
            *)
                exit 0
                ;;
        esac
    else
        use $version
    fi
}

case "$1" in
        install)
            install $2
            ;;
        
        use)
            use $2
            ;;

        list)
            list $2
            ;;         

        delete)
            delete $2
            ;;    
        
        detect)
            detect
            ;;  

        *)
            echo $"Usage: $0 {install|use|list|delete|detect|help}"
            exit 1
 
esac
